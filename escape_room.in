% Define rooms
room(room1).
room(room2).
room(exit).

% Define doors
door(door1).
door(door2).
connects(door1, room1, room2).
connects(door2, room2, exit).

% Define keys
key(key1).
key(key2).

opens(key1, door1).
opens(key2, door2).

% Define puzzles
puzzle(puzzle1).
puzzle(puzzle2).

% Solving puzzles grants keys
(correct_answer(player, puzzle1) -> solved(player, puzzle1)).
(solved(player, puzzle1) -> has(player, key1)).

(correct_answer(player, puzzle2) -> solved(player, puzzle2)).
(solved(player, puzzle2) -> has(player, key2)).

% Define traps
trap(trap1).

% Trap presence in rooms
trap_in_room(room2, trap1).

% Remove Key Dependency for Disarming Traps
(trap_in_room(room2, trap1) -> disarmed(trap1)).

% Adjust Implications to Reflect Removal of Key Requirement
(disarmed(trap1) -> trap_in_room(room2, trap1)).

% Default safety: A room is safe if all traps in it are disarmed
(safe(player, Y) :- room(Y), (forall Z (trap_in_room(Y, Z) -> disarmed(Z)))).

% Rules for moving between rooms
(can_move(player, A, B) :- door(Y), connects(Y, A, B), open(Y), at(player, A)).

% Opening doors
(open(Y) :- has(player, K), opens(K, Y), action_open_door(player, Y)).
