% Define rooms
room(room1).
room(room2).
room(exit).

% Define doors
door(door1).
door(door2).
connects(door1, room1, room2).
connects(door2, room2, exit).

open(door1):-false.
open(door2):-false.

% Define keys
key(key1).
key(key2).

opens(key1, door1).
opens(key2, door2).

% Define puzzles
puzzle(puzzle1).
puzzle(puzzle2).

% Solving puzzles grants keys
all X (correct_answer(X, puzzle1) -> solved(X, puzzle1)).
all X (solved(X, puzzle1) -> has(X, key1)).

all X (correct_answer(X, puzzle2) -> solved(X, puzzle2)).
all X (solved(X, puzzle2) -> has(X, key2)).

% Trap associated with a room
trap(room2, trap1).

% Definitions for safety in specific rooms
all X (at(X, room2) & disarmed(trap(room2, trap1)) -> safe(X, room2)).
all X (at(X, room2) & not disarmed(trap(room2, trap1)) -> not safe(X, room2)).

% Disarming trap1 makes room2 safe
all X (disarmed(trap(room2, trap1)) & at(X, room2) -> safe(X, room2)).

% Disarming traps requires key2
all X all Y (has(X, key2) & trap(room2, Y) -> disarmed(Y)).

% Initial item locations
contains(room1, puzzle1).
contains(room2, puzzle2).
contains(room2, trap1).

% Rules for moving between rooms
all X all Y all A all B (door(Y) & connects(Y, A, B) & open(Y) & at(X, A) -> can_move(X, A, B)).

% Opening doors
all X all Y all K (has(X, K) & opens(K, Y) & action_open_door(X, Y) -> open(Y)).